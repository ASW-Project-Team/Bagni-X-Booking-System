openapi: 3.0.1
info:
  title: BagniXBookingSystemApi
  description: Progetto per l'esame di ASW di Maldini, Gorini e Angelini.
  version: "0.1"
servers:
  - url: http://localhost:3000
components:
  securitySchemes:
    specificUserAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    userAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    adminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    rootAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /api/customers/{user-id}:
    get:
      summary: It returns user data associated to the given user id.
      security:
        - specificUserAuth: []
        - adminAuth: []
      parameters:
        - name: user-id
          in: path
          description: User identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: A JSON object describing the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  email:
                    type: string
                  name:
                    type: string
                  surname:
                    type: string
                  phone:
                    type: string
                  address:
                    type: string
                  registered:
                    type: boolean
        "400":
          description: FAIL
        "401":
          description: Unauthorized access, the client is not the authorized user, neither an admin.
        "404":
          description: The user with the given id does not exist, or it has been logically deleted.

    put:
      summary: Request of modification for some fields of the given user.
      description: >
        The modification request with the PUT can be executed by the interested user. Logical deletion of
        the user can be executed by the admin using the DELETE primitive.
      security:
        - specificUserAuth: []
      parameters:
        - name: user-id
          in: path
          description: User identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                surname:
                  type: string
                phone:
                  type: string
                address:
                  type: string
                password:
                  type: string
                deleted:
                  type: boolean
      responses:
        "200":
          description: The modification has been accepted by the server.
        "400":
          description: Malformed request.
        "401":
          description: Unauthorized, the given credentials do not correspond to the correce credentials of the user.
        "404":
          description: The user with the given id does not exist, or it has been logically deleted.

  /api/customers/:
    post:
      summary: It creates a fresh new user.
      description: >
        Admins and root can only create unregistered customers; any other cannot create unregistered customers.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                surname:
                  type: string
                phone:
                  type: string
                address:
                  type: string
                password:
                  type: string
                registered:
                  type: boolean
              required:
                - name
                - surname
                  - email
                - password
                - registered
      responses:
        "201":
          description: The user has been correctly created.
        "400":
          description: Request was not well-formed.

    get:
      summary: It returns all active customers, in a paginated fashion.
      security:
        - adminAuth: []
        - rootAuth: []
      parameters:
        - name: page-id
          in: query
          description: >
            It indicates which one of the incremental paginated results will be delivered. If omitted, default is 0.
          schema:
            type: integer
          required: false
        - name: page-size
          in: query
          description: >
            It indicates the maximum size of the results. If omitted, default is 10.
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: The user array has been correctly delivered.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    email:
                      type: string
                    name:
                      type: string
                    surname:
                      type: string
                    phone:
                      type: string
                    address:
                      type: string
                    registered:
                      type: boolean
        "401":
          description: The admin was not correctly authenticated.

  /api/auth/customers/signup/:
    post:
      summary: This root allows a user to sign up
      description: none
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/auth/user/signin/:
    post:
      summary: This root allows a user to login in
      description: none
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized


  /api/auth/admin/signup/:
    post:
      summary: This root allows the admiun to sign up
      description: none
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/auth/admin/signin/:
    post:
      summary: This root allows the admin to login in
      description: none
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized


  /api/feed/:
    get:
      summary: It returns the of the page-id page
      description: Feed
      parameters:
        - name: page_id
          in: query
          description: Page identificator. If speficied, only bookings relative to the page are returned.
          required: false
          style: form
          explode: true
          schema:
            type: integer

        - name: page_size
          in: query
          description: It specifies that the returned booking are only of the number given.
          required: false
          style: form
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/bookings/:
    get:
      summary: It returns some bookings, related optionally to a user. If page size is not specified, the first 10 are returned.
      description: Booking
      parameters:
        - name: user_id
          in: query
          description: User identificator. If the parameter is present, bookings from the specified user are returned.
          required: false
          explode: false
          schema:
            type: string

        - name: page_id
          in: query
          description: Page identificator. If speficied, only bookings relative to the page are returned.
          required: false
          style: form
          explode: true
          schema:
            type: integer

        - name: page_size
          in: query
          description: It specifies that the returned booking are only of the number given.
          required: false
          style: form
          explode: true
          schema:
            type: integer

      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/bookings/{booking-id}/:
    get:
      summary: It returns the booking with id booking_id
      description: Booking
      parameters:
        - name: booking-id
          in: path
          description: Booking identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string

      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized
    put:
      summary: It allows the user to modify the booking
      description: Booking
      parameters:
        - name: booking-id
          in: path
          description: Booking identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized
    delete:
      summary: It deletes a reservation
      description: Modifica-aggiunta prenotazione
      parameters:
        - name: booking-id
          in: path
          description: Booking identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/new-booking/availability/:
    get:
      summary: It returns all the available places in the period, also available selectable services, rank linked to every umbrella
      description: New booking
      parameters:
        - name: from
          in: query
          description: Start booking date
          required: true
          style: form
          explode: true
          schema:
            type: string

        - name: to
          in: query
          description: End booking date
          required: true
          style: form
          explode: true
          schema:
            type: string

      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/new-booking/checkout/:
    post:
      summary: All fields of a booking, i.e. umbrella id, services, price, ecc.
      description: It allows the user to book a site
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/home/:
    get:
      summary: The main home card, an array of home cards, an array of services, and an array of rank umbrellas.
      description: Used in the home screen
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/catalog/ranks/:
    post:
      summary: The rank of the umbrella
      description: It allows to insert a new rank
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/catalog/ranks/{rank-id}/:
    put:
      summary: The rank of the umbrella
      description: It allows to modify a rank
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized
      parameters:
        - name: rank-id
          in: path
          description: The id of the rank
          required: true
          explode: true
          schema:
            type: string

    get:
      summary: The rank of the umbrella
      description: It return a specified rank
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized
    parameters:
      - name: rank-id
        in: path
        description: The id of the rank
        required: true
        explode: true
        schema:
          type: string

  #/catalog/sales/:
  #  get:
  #    parameters:
  #      - name: rank_id
  #        in: query
  #        description: Rank to refer for the sale
  #        required: false
  #        style: form
  #        explode: true
  #        schema:
  #          type: string

  #      - name: page_id
  #        in: query
  #        description: Page identificator. If speficied, only sales relative to the page are returned.
  #        required: false
  #        style: form
  #        explode: true
  #        schema:
  #          type: integer

  #      - name: page_size
  #        in: query
  #        description: It specifies that the returned salews are only of the number given.
  #        required: false
  #        style: form
  #        explode: true
  #        schema:
  #           type: integer
  #  post:

  #  /catalog/sales/:id:
  #    get:
  #      parameters:
  #        - name: sale_id
  #          in: path
  #          description: Id to refer for the sale
  #          required: false
  #          style: form
  #          explode: true
  #          schema:
  #            type: string
  #    put:
  #      parameters:
  #        - name: sale_id
  #          in: path
  #          description: Id to refer for the sale
  #          required: false
  #          style: form
  #          explode: true
  #          schema:
  #            type: string

  /api/catalog/services/:
    get:
      summary: The services are some options that a user can insert in a new booking
      description: It returns all the services availables
      parameters:
        - name: page_id
          in: query
          description: Page identificator. If speficied, only services relative to the page are returned.
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: page_size
          in: query
          description: It specifies that the returned salews are only of the number given.
          required: false
          style: form
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized
    post:
      summary: The services are some options that a user can insert in a new booking
      description: It allows the admin to insert a new service
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/catalog/services/{service-id}/:
    get:
      summary: The services are some options that a user can insert in a new booking
      description: It returns a specified service
      parameters:
        - name: service-id
          in: path
          description: Service id
          required: true
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized
    put:
      summary: The services are some options that a user can insert in a new booking
      description: It allows the admin to modify a service
      parameters:
        - name: service-id
          in: path
          description: Service id
          required: true
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized
  #   /stats/:
  #    description: robe
